#! /bin/sh

# Build and install a cross compiler.
#
# Expects two arguments:
#
# - The architecture tuple of the target (e.g., x86_64-freebsd9).
# - The path to the FreeBSD base.txz archive for the target CPU architecture.
#
# Additionally, the script expects to find source archives for binutils, gmp,
# mpfr, mpc, and gcc in /usr/local/src. It will extract, configure, build, and
# install them as necessary, including removal of old source.

set -e

SELF="$0"
die ()
{
    echo "$SELF: $1!" 1>&2
    exit 1
}

if [ $# -lt 2 ]
then
    die "insufficient arguments"
fi

HOST="$1"
FBSD_BASE_ARCHIVE="$2"

mkdir -p /usr/local/"$HOST"
tar -C /usr/local/"$HOST" \
    -xf "$FBSD_BASE_ARCHIVE" \
    ./usr/include \
    ./usr/lib \
    ./lib

# Move everything out of /usr into the root so it matches the usual
# cross-compiler headers/library structure, but save /usr itself: we need it to
# build GCC.
mv /usr/local/"$HOST"/usr/include \
   /usr/local/"$HOST"
mv /usr/local/"$HOST"/usr/lib/* \
   /usr/local/"$HOST"/lib
rmdir /usr/local/"$HOST"/usr/lib

# The FreeBSD base install has a number of symlinks in /usr/lib pointing
# absolutely to /lib. Their targets are now actually in /usr/local/$HOST, so
# the links are broken. Because we've folded /usr/lib and /lib into the same
# directory, the easy fix is to relink all broken symlinks to the base name of
# their original targets.
find -L /usr/local/"$HOST"/lib -type l | while read -r broken_link
do
    target="$(basename "$(readlink "$broken_link")")"
    rm "$broken_link"
    ln -s "$target" "$broken_link"
done

# Clean up any existing source for a package, unpack the source archive, and
# move into the unpacked directory.
stage ()
{
    rm -Rf /usr/local/src/"$1"-*/
    tar -C /usr/local/src -xf /usr/local/src/"$1"-*.t* \
        || die "couldn't extract $1 source archive"
    cd /usr/local/src/"$1"-*/ \
        || die "couldn't locate extracted $1 source"
}

# Get rid of a source tree we just unpacked and compiled from.
strike ()
{
    cd /usr/local/src || die "couldn't get out of the source tree"
    rm -Rf /usr/local/src/"$1"-*/
}

stage binutils
# Compilation of the gold linker from binutils 2.19.1a fails under GCC 8.3.0,
# so we only enable plain ol' ld.
#
# Newer GCC versions have stricter error checking, so -Werror (which binutils
# enables by default) causes the build to fail due to perfectly valid code
# quality concerns over which we have no control.
./configure --target="$HOST" \
            --enable-libssp \
            --enable-ld \
            --disable-werror \
            --with-sysroot=/usr/local/"$HOST"
make
make install
strike binutils

stage gcc
mkdir build
cd build || die
# Not sure if GCC 11.2.0 supports --with-native-system-header-dir, so it may not be
# configurable to search for system headers in /usr/local/$HOST/include; it
# may always want /usr/local/$HOST/usr/include. Fine. Let it have it, then.
ln -s /usr/local/"$HOST"/include /usr/local/"$HOST"/usr/include
# Not sure what standard GCC 11.2.0 requires to compile, we'll use c++11.
if [ -n "$GCC_CFLAGS" ]
then
    export CFLAGS="$GCC_CFLAGS"
elif [ -z "$CFLAGS" ]
then
    export CFLAGS="-std=c++11"
fi
# If texinfo is installed, GCC will try to recompile its document tree.
# We don't need it.
# This forcibly disables documentation compilation.
export MAKEINFO=missing
# If we don't tell GCC to look for build-time tools in /usr/local/bin (where
# we've just installed the binutils tools for the target), it'll generate no-op
# stubs and fail while compiling the CRT objects.
../configure --target="$HOST" \
             --enable-languages=c,c++ \
             --enable-libssp \
             --disable-libgomp \
             --disable-nls \
             --with-sysroot=/usr/local/"$HOST" \
             --with-build-time-tools=/usr/local/bin
make
make install
strike gcc
# We're done with the /include â†’ /usr/include symlink now.
rm /usr/local/"$HOST"/usr/include
rmdir /usr/local/"$HOST"/usr

# The GCC installation process copies some binaries (ar, as, c++, g++, gcc, ld,
# nm, objcopy, objdump, and strip) into /$PREFIX/$HOST/bin as well as
# /$PREFIX/bin. These copies take up an extra ~45MB. The polite thing to do is
# to replace them with symlinks. (That's how regular Debian cross-compilers are
# packaged, too.)
for duplicate_bin in /usr/local/"$HOST"/bin/*
do
    target=/usr/local/bin/"$HOST"-"$(basename "$duplicate_bin")"
    rm "$duplicate_bin"
    ln -s "$target" "$duplicate_bin"
done
